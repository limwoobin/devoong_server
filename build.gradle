plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.drogbalog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "11"

repositories {
    mavenCentral()
}

compileJava{
    options.fork = false
    options.incremental = false
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-amqp')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // querydsl
    compile('com.querydsl:querydsl-core')
    compile('com.querydsl:querydsl-jpa')
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    implementation 'mysql:mysql-connector-java'

    // security
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    testCompile("org.springframework.security:spring-security-test")

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // redis
    compile 'org.springframework.boot:spring-boot-starter-data-redis:2.3.1.RELEASE'

    // lombok
    annotationProcessor("org.projectlombok:lombok:1.18.10")
    compileOnly("org.projectlombok:lombok:1.18.10")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.10")
    testCompileOnly("org.projectlombok:lombok:1.18.10")

    // Junit
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')

    // validation
    implementation('org.springframework.boot:spring-boot-starter-validation')

    // swagger - documentation
    implementation('io.springfox:springfox-swagger2:2.9.2')
    implementation('io.springfox:springfox-swagger-ui:2.9.2')

    // email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    // mapstruct - bean mapper
    implementation('org.mapstruct:mapstruct:1.2.0.Final')
    implementation('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.2.0.Final')
    compileOnly("org.mapstruct:mapstruct-processor:1.2.0.Final")

    // retrofit
    implementation('com.squareup.retrofit2:retrofit:2.5.0')
    implementation('com.squareup.retrofit2:converter-gson:2.5.0')
    implementation('com.squareup.okhttp3:logging-interceptor:3.12.1')

    testImplementation("com.h2database:h2")
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

configurations {
    all {
        exclude group: 'org.springframework.boot' , module: 'spring-boot-starter-logging'
    }
}

test {
    useJUnitPlatform()
}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}